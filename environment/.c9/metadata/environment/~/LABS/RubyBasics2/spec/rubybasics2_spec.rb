{"changed":true,"filter":false,"title":"rubybasics2_spec.rb","tooltip":"~/LABS/RubyBasics2/spec/rubybasics2_spec.rb","value":"require 'rubybasics2.rb'\n\nRSpec.configure do |config|\n  config.filter_run_excluding :disabled => true\nend\n\ndescribe \"#hello\" do\n  it \"should be defined\" do\n    expect { hello(\"Testing\") }.not_to raise_error()#::NoMethodError)\n  end\n\n  it \"The hello method returns the correct string [30 points]\" , points: 30 do\n    expect(hello(\"Dan\").class).to eq(String)\n    expect(hello(\"Dan\")).to eq('Hello, Dan'), \"Incorrect results for input: \\\"Dan\\\"\"\n    expect(hello(\"BILL\")).to eq('Hello, BILL'), \"Incorrect results for input: \\\"BILL\\\"\"\n    expect(hello(\"Mr. Ilson\")).to eq('Hello, Mr. Ilson'), \"Incorrect results for input: \\\"Mr. Ilson\\\"\"\n  end\nend\n\ndescribe \"#starts_with_consonant?\" do\n  it \"should be defined\" do\n    expect { starts_with_consonant?(\"d\") }.not_to raise_error()#::NoMethodError)\n  end\n  it 'classifies true cases [10 points]' , points: 10 do\n    expect(starts_with_consonant?('v')).to be_truthy, \"'v' is a consonant\"\n    ['v', 'vest', 'Veeee', 'crypt'].each do |string|\n      expect(starts_with_consonant?(string)).to be_truthy, \"Incorrect results for input: \\\"#{string}\\\"\"\n    end\n  end\n  it 'classifies false cases [10 points]' , points: 10 do\n    expect(starts_with_consonant?('a')).to be_falsy, \"'a' is not a consonant\"\n    ['asdfgh', 'Unix'].each do |string|\n      expect(starts_with_consonant?(string)).to be_falsy, \"Incorrect results for input: \\\"#{string}\\\"\"\n    end\n  end\n  it 'works on the empty string [5 points]' , points: 5 do\n    expect(starts_with_consonant?('')).to be_falsy\n  end\n  it 'works on nonletters [5 points]' , points: 5 do\n    expect(starts_with_consonant?('#foo')).to be_falsy\n  end\nend\n\ndescribe \"#binary_multiple_of_4?\", :disabled => true do\n  it \"should be defined\" do\n    expect { binary_multiple_of_4?(\"yes\") }.not_to raise_error()#::NoMethodError)\n  end\n  it \"classifies valid binary numbers [30 points]\" , points: 30 do\n    [\"1010101010100\", \"0101010101010100\", \"100\", \"0\"].each do |string|\n      expect(binary_multiple_of_4?(string)).to be_truthy,  \"Incorrect results for input: \\\"#{string}\\\"\"\n    end\n    [\"101\", \"1000000000001\"].each do |string|\n      expect(binary_multiple_of_4?(string)).not_to be_truthy,  \"Incorrect results for input: \\\"#{string}\\\"\"\n    end\n  end\n  it \"rejects invalid binary numbers [10 points]\" , points: 10 do\n    expect(binary_multiple_of_4?('a100')).to be_falsy, \"'a100' is not a valid binary number!\"\n    expect(binary_multiple_of_4?('')).to be_falsy, \"The empty string is not a valid binary number!\"\n  end\nend","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":0,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1549397567285}